let TAB = 9
let LF = 10
let CR = 13
let SPACE = 32
let HYPHEN = 45

# A table that maps bytes (based on their index) to a boolean that states if the
# byte can be included in URLs (and thus heading IDs). Bytes are used as an
# index, and if the value is `true`, it's safe to include the byte.
let URL_SAFE = [
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, false, false, false, false, false, false, false, false, false, false,
  false, true,  true,  false, true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  false, false, false, false, false, false, false, true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  false, false, false, false, true,  false, true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  false, false, false, true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,  true,
  true,  true
]

# Generates a URL-safe path of the given string (e.g. a blog post title).
fn pub normalize(string: String) -> String {
  let url = ByteArray.new
  let iter = string.bytes.peekable

  loop {
    match iter.next {
      # If the byte is in the ASCII range A-Z, lowercase it; otherwise
      # we keep it as-is.
      case Some(v) if v >= 65 and v <= 90 -> url.push(v + 32)
      case Some(v) if URL_SAFE.get(v) -> url.push(v)
      case Some(TAB or LF or CR or SPACE) -> {
        if url.last.unwrap_or(-1) != HYPHEN { url.push(HYPHEN) }

        loop {
          match iter.peek {
            case Some(TAB or LF or CR or SPACE) -> iter.next
            case _ -> break
          }
        }
      }
      case Some(_) -> {}
      case _ -> break
    }
  }

  url.into_string
}
