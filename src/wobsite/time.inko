import std.time.DateTime
import std.int

let MONTHS = [
  'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',
  'September', 'October', 'November', 'December'
]

fn parse_number(string: String, start: Int, size: Int) -> Option[Int] {
  Int.parse(string.slice(start, size), int.Format.Decimal)
}

fn pad_zero(value: Int) -> String {
  value.to_string.pad_start('0', chars: 2)
}

fn pub parse_date(string: String) -> Option[DateTime] {
  if string.size < 19 { return Option.None }

  Option.Some(DateTime {
    @year = try parse_number(string, start: 0, size: 4),
    @month = try parse_number(string, start: 5, size: 2),
    @day = try parse_number(string, start: 8, size: 2),
    @hour = parse_number(string, start: 11, size: 2).unwrap_or(0),
    @minute = parse_number(string, start: 14, size: 2).unwrap_or(0),
    @second = parse_number(string, start: 17, size: 2).unwrap_or(0),
    @sub_second = 0.0,
    @utc_offset = 0,
  })
}

fn pub human_readable_date(date: ref DateTime) -> String {
  "{MONTHS.get(date.month - 1)} {date.day}, {date.year}"
}

fn pub iso_date(date: ref DateTime) -> String {
  "{date.year}-{pad_zero(date.month)}-{pad_zero(date.day)}\
    T{pad_zero(date.hour)}:{pad_zero(date.minute)}:{pad_zero(date.second)}Z"
}
